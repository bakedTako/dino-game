class Draw {
    protected canvas: HTMLCanvasElement;
    protected ctx: CanvasRenderingContext2D | null;

    constructor(canvasId: string) {
        this.canvas = document.getElementById(canvasId) as HTMLCanvasElement;
        this.ctx = this.canvas.getContext('2d');
    }

    protected drawImage(image: HTMLImageElement, cordx: number, cordy: number, scale: number): void {
        if (this.ctx === null) {
            console.error('Canvas 2D context is not supported');
            return;
        }
        const width = image.width * scale;
        const height = image.height * scale;
        this.ctx.drawImage(image, cordx, cordy, width, height);
    }
}

class RepeatedDraw extends Draw {
    protected intervalId: number | null = null;
    protected images: HTMLImageElement[];
    protected currentIndex: number = 0;

    constructor(canvasId: string, images: HTMLImageElement[]) {
        super(canvasId);
        this.images = images;
    }

    public startDrawing(interval: number, cordx: number, cordy: number, scale: number): void {
        if (this.images.length === 0) return;

        this.intervalId = window.setInterval(() => {
            const image = this.images[this.currentIndex];
            this.drawImage(image, cordx, cordy, scale);
            this.currentIndex = (this.currentIndex + 1) % this.images.length;
        }, interval);
    }

    public stopDrawing(): void {
        if (this.intervalId !== null) {
            window.clearInterval(this.intervalId);
            this.intervalId = null;
        }
    }

    public drawImageOnce(image: HTMLImageElement, cordx: number, cordy: number, scale: number): void {
        this.drawImage(image, cordx, cordy, scale);
    }
}

class Ground {
    private x: number;
    private y: number;
    private width: number;
    private height: number;

    constructor(x: number, y: number, width: number, height: number) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }

    public getX(): number {
        return this.x;
    }

    public getY(): number {
        return this.y;
    }

    public getWidth(): number {
        return this.width;
    }

    public getHeight(): number {
        return this.height;
    }

    public intersects(obj: GameObject): boolean {
        // Check if the object's bottom overlaps with the ground's top
        return obj.getY() + obj.getHeight() * obj.getScale() >= this.y;
    }
}


class GameObject extends RepeatedDraw {
    public x: number;
    public y: number;
    public vx: number;
    public vy: number;
    public width: number;
    public height: number;
    public scale: number;

    constructor(canvasId: string, images: HTMLImageElement[], x: number, y: number, width: number, height: number, scale: number = 1) {
        super(canvasId, images);
        this.x = x;
        this.y = y;
        this.vx = 0;
        this.vy = 0;
        this.width = width;
        this.height = height;
        this.scale = scale;
    }

    public getX(): number {
        return this.x;
    }

    public getY(): number {
        return this.y;
    }

    public setX(x: number): void {
        this.x = x;
    }

    public setY(y: number): void {
        this.y = y;
    }

    public getWidth(): number {
        return this.width;
    }

    public getHeight(): number {
        return this.height;
    }

    public getScale(): number {
        return this.scale;
    }

    public update(): void {
        this.x += this.vx;
        this.y += this.vy;
    }

    public draw(): void {
        // Draw the current image
        const image = this.images[this.currentIndex];
        this.drawImageOnce(image, this.x, this.y, this.scale);
    }

    public intersectsGround(ground: Ground): boolean {
        // Check if the object's bottom overlaps with the ground's top
        return this.y + this.height * this.scale >= ground.getY();
    }
}


class Gravity {
    private gravity: number;

    constructor(gravity: number = 9.8) {
        this.gravity = gravity;
    }

    public applyTo(gameObject: GameObject): void {
        gameObject.vy += this.gravity;
    }
}

class Dino extends GameObject {
    private leftLegImage: HTMLImageElement;
    private rightLegImage: HTMLImageElement;
    private currentLegImage: HTMLImageElement;
    private ground: Ground | null;
    private gravity: Gravity;
    private walkingAnimationInterval: number = 300; // Interval in milliseconds for switching legs
    private lastLegSwitchTime: number = 0; // Timestamp of the last leg switch

    constructor(canvasId: string, leftLegImage: HTMLImageElement, rightLegImage: HTMLImageElement, x: number, y: number, width: number, height: number, scale: number = 1) {
        super(canvasId, [leftLegImage, rightLegImage], x, y, width, height, scale);
        this.leftLegImage = leftLegImage;
        this.rightLegImage = rightLegImage;
        this.currentLegImage = this.leftLegImage; // Start with left leg image
        this.ground = null; // Initialize ground reference as null
        this.gravity = new Gravity(0.1); // Initialize gravity with default value
    }

    public setGround(ground: Ground): void {
        this.ground = ground;
    }

    public update(): void {
        super.update(); // Call base class update method

        if (this.ground) {
            // Apply gravity only if not on the ground
            if (!this.intersectsGround(this.ground)) {
                this.gravity.applyTo(this); // Apply gravity to dino
            } else {
                this.vy = 0; // Stop vertical movement when on the ground
                this.setY(this.ground.getY() - this.getHeight() * this.getScale()); // Snap to ground level
                
                // Check if enough time has passed to switch legs
                const currentTime = Date.now();
                if (currentTime - this.lastLegSwitchTime >= this.walkingAnimationInterval) {
                    this.switchLeg(); // Switch legs
                    this.lastLegSwitchTime = currentTime; // Update last switch time
                }
            }
        }
    }

    private switchLeg(): void {
        // Toggle between left and right leg images
        if (this.currentLegImage === this.leftLegImage) {
            this.currentLegImage = this.rightLegImage;
        } else {
            this.currentLegImage = this.leftLegImage;
        }
    }

    public draw(): void {
        // Draw the current leg image
        this.drawImageOnce(this.currentLegImage, this.x, this.y, this.scale);
    }
}




// Preload images
function preloadImages(imagePaths: string[], callback: (images: HTMLImageElement[]) => void) {
    const images: HTMLImageElement[] = [];
    let loadedImagesCount = 0;

    imagePaths.forEach(path => {
        const img = new Image();
        img.src = path;
        img.onload = () => {
            loadedImagesCount++;
            if (loadedImagesCount === imagePaths.length) {
                callback(images);
            }
        };
        img.onerror = () => {
            console.error(`Failed to load image at path: ${path}`);
        };
        images.push(img);
    });
}

// Centralized game loop function
// Centralized game loop function
function gameLoop(gameObjects: GameObject[], gravity: Gravity, ground: Ground, canvasId: string) {
    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;
    const ctx = canvas.getContext('2d');

    // Set ground for Dino if it exists in gameObjects
    const dino = gameObjects.find(obj => obj instanceof Dino) as Dino | undefined;
    if (dino) {
        dino.setGround(ground);
    }

    function loop() {
        if (ctx) {
            ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the entire canvas

            for (const obj of gameObjects) {
                gravity.applyTo(obj); // Apply gravity

                // Check and resolve collisions with ground for Dino only
                if (obj instanceof Dino && obj.intersectsGround(ground)) {
                    obj.update(); // Update Dino's position and stop falling
                } else {
                    obj.update(); // Update position for other game objects
                }

                obj.draw(); // Draw the object
            }
        }

        requestAnimationFrame(loop);
    }

    loop();
}

// Example usage

const imagePaths: string[] = [
    'assets/dino/LeftLeg.png',
    'assets/dino/RightLeg.png'
];

preloadImages(imagePaths, (images) => {
    const dino = new Dino('game-canvas', images[0], images[1], 10, 10, 50, 50, 0.25);
    const ground = new Ground(0, 250, 1920, 50); // Adjust dimensions as per your game's ground setup
    const gravity = new Gravity(0.1);

    const gameObjects: GameObject[] = [dino];

    gameLoop(gameObjects, gravity, ground, 'game-canvas');
});
